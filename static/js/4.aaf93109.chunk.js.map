{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength50","maxLength","Textarea","ElementCreator","DialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","required","placeholder","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","addMessage","newMessageText","mapStateToPropsForRedirect","state","isAuthed","auth","withAuthRedirect","Component","connect","compose"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCWnKC,EARI,SAACC,GAChB,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,IAAKN,EAAMO,QCEzCC,EANC,SAACR,GACb,OACI,yBAAKC,UAAWC,IAAEO,SAAUT,EAAMS,U,iCCGpCC,EAAcC,YAAU,IACxBC,EAAWC,YAAe,YAa1BC,EAAmBC,YAAU,CAACC,KAAM,eAAjBD,EAXL,SAACf,GACjB,OAAO,0BAAMiB,SAAUjB,EAAMkB,cACzB,6BACI,kBAACC,EAAA,EAAD,CAAOZ,KAAK,iBAAiBa,UAAWR,EAAUS,SAAU,CAACC,IAAUZ,GAAca,YAAY,wBAErG,6BACI,oDAgCGC,EAzBC,SAACxB,GACb,IAAIyB,EAAkBzB,EAAM0B,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAYC,IAAKD,EAAEvB,GAAIC,KAAMsB,EAAEtB,KAAMD,GAAIuB,EAAEvB,QAClGyB,EAAmB/B,EAAM0B,YAAYM,SAASJ,KAAI,SAACK,GAAD,OAAO,kBAAC,EAAD,CAASH,IAAKG,EAAE3B,GAAIG,QAASwB,EAAExB,aAM5F,OACI,yBAAKR,UAAWC,IAAEyB,SACd,yBAAK1B,UAAWC,IAAEgC,cACbT,GAEL,yBAAKxB,UAAWC,IAAE8B,UACd,6BACKD,GAEL,6BACI,kBAACjB,EAAD,CAAkBG,SAdX,SAACkB,GACpBnC,EAAMoC,WAAWD,EAAOE,uB,eCzB5BC,EAA6B,SAACC,GAC9B,MAAO,CACHC,SAAUD,EAAME,KAAKD,WAedE,EAXiB,SAACC,GAQ7B,OAFmCC,YAAQN,EAARM,EALT,SAAC5C,GACvB,OAAKA,EAAMwC,SACJ,kBAACG,EAAc3C,GADM,kBAAC,IAAD,CAAUK,GAAG,e,OCsClCwC,sBACXD,aAhBoB,SAACL,GACrB,MAAO,CACHb,YAAaa,EAAMb,eAcE,CAACU,iBAC1BM,EAFWG,CAGbrB","file":"static/js/4.aaf93109.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3n5C0\",\"dialogsItems\":\"Dialogs_dialogsItems__1BFJw\",\"active\":\"Dialogs_active__3k5UB\",\"messages\":\"Dialogs_messages__Qw1gh\",\"message\":\"Dialogs_message__1aN1g\"};","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../utils/validators/validators\";\r\nimport {ElementCreator} from '../../common/FormControls/FormControl'\r\n\r\nconst maxLength50 = maxLength(50);\r\nconst Textarea = ElementCreator(\"textarea\");\r\n\r\nconst DialogsForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name='newMessageText' component={Textarea} validate={[required, maxLength50]} placeholder='Enter your message'/>\r\n        </div>\r\n        <div>\r\n            <button>Add message</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst DialogsFormRedux = reduxForm({form: 'dialogsForm'})(DialogsForm);\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n    let messagesElements = props.dialogsPage.messages.map((m) => <Message key={m.id} message={m.message}/>);\r\n\r\n    let addMessageSubmit = (values) => {\r\n        props.addMessage(values.newMessageText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messagesElements}\r\n                </div>\r\n                <div>\r\n                    <DialogsFormRedux onSubmit={addMessageSubmit}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuthed: state.auth.isAuthed\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    const RedirectComponent = (props) => {\r\n        if (!props.isAuthed) return <Redirect to='/login'/>\r\n        return <Component {...props}/>\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}\r\n\r\nexport default withAuthRedirect;","import React from \"react\";\r\nimport {addMessage} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n/*const DialogsContainer = () => {\r\n\r\n\r\n    return <StoreContext.Consumer>\r\n        {store => {\r\n            let state = store.getState().dialogsPage;\r\n\r\n            let onAddMessage = () => {\r\n                let action = addMessageCreator();\r\n                store.dispatch(action);\r\n            };\r\n\r\n            let onMessageChange = (text) => {\r\n                let action = updateNewMessageTextCreator(text);\r\n                store.dispatch(action);\r\n            }\r\n\r\n            return <Dialogs addMessage={onAddMessage}\r\n                            updateNewMessageText={onMessageChange}\r\n                            dialogs={state.dialogs}\r\n                            messages={state.messages}\r\n                            newMessageText={state.newMessageText}/>\r\n        }\r\n        }\r\n    </StoreContext.Consumer>\r\n}*/\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\n/*const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: () => {\r\n            let action = addMessageCreator();\r\n            dispatch(action);\r\n        }\r\n    }\r\n}*/\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}